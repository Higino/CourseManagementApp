[{"/Users/hsilva/Documents/ Code/expense-tracker/expense-webapp/src/App.js":"1","/Users/hsilva/Documents/ Code/expense-tracker/expense-webapp/src/Expenses.js":"2","/Users/hsilva/Documents/ Code/expense-tracker/expense-webapp/src/Home.js":"3","/Users/hsilva/Documents/ Code/expense-tracker/expense-webapp/src/Category.js":"4","/Users/hsilva/Documents/ Code/expense-tracker/expense-webapp/src/AppNav.js":"5","/Users/gino/Documents/Code/expense-tracker/expense-webapp/src/App.js":"6","/Users/gino/Documents/Code/expense-tracker/expense-webapp/src/Expenses.js":"7","/Users/gino/Documents/Code/expense-tracker/expense-webapp/src/Category.js":"8","/Users/gino/Documents/Code/course-tracker/client/src/index.js":"9","/Users/gino/Documents/Code/course-tracker/client/src/AppNav.js":"10","/Users/gino/Documents/Code/course-tracker/client/src/App.js":"11","/Users/gino/Documents/Code/course-tracker/client/src/components/CourseListing.js":"12","/Users/gino/Documents/Code/course-tracker/client/src/components/ImportData.js":"13","/Users/gino/Documents/Code/course-tracker/client/src/Home.js":"14","/Users/gino/Documents/Code/course-tracker/client/src/components/ParseCSVFileDashboard.js":"15","/Users/gino/Documents/Code/course-tracker/client/src/components/CourseManagement.js":"16","/Users/gino/Documents/Code/course-tracker/client/src/components/CourseSelector.js":"17"},{"size":751,"mtime":1606154619264,"results":"18","hashOfConfig":"19"},{"size":11659,"mtime":1606154619265,"results":"20","hashOfConfig":"19"},{"size":526,"mtime":1606502009229,"results":"21","hashOfConfig":"19"},{"size":1668,"mtime":1606499492266,"results":"22","hashOfConfig":"19"},{"size":791,"mtime":1606154619264,"results":"23","hashOfConfig":"19"},{"size":751,"mtime":1619530535760,"results":"24","hashOfConfig":"25"},{"size":11659,"mtime":1619530535761,"results":"26","hashOfConfig":"25"},{"size":1668,"mtime":1619530535761,"results":"27","hashOfConfig":"25"},{"size":245,"mtime":1619547517922,"results":"28","hashOfConfig":"29"},{"size":1383,"mtime":1620156281942,"results":"30","hashOfConfig":"29"},{"size":1080,"mtime":1620471979706,"results":"31","hashOfConfig":"29"},{"size":4208,"mtime":1620492727290,"results":"32","hashOfConfig":"29"},{"size":312,"mtime":1619789208097,"results":"33","hashOfConfig":"29"},{"size":305,"mtime":1619794199383,"results":"34","hashOfConfig":"29"},{"size":8293,"mtime":1620139028528,"results":"35","hashOfConfig":"29"},{"size":1945,"mtime":1620491469745,"results":"36","hashOfConfig":"29"},{"size":1477,"mtime":1620489824518,"results":"37","hashOfConfig":"29"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"dt3asi",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"be7lk2",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ddi8qe",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/hsilva/Documents/ Code/expense-tracker/expense-webapp/src/App.js",[],"/Users/hsilva/Documents/ Code/expense-tracker/expense-webapp/src/Expenses.js",[],"/Users/hsilva/Documents/ Code/expense-tracker/expense-webapp/src/Home.js",[],"/Users/hsilva/Documents/ Code/expense-tracker/expense-webapp/src/Category.js",[],"/Users/hsilva/Documents/ Code/expense-tracker/expense-webapp/src/AppNav.js",[],"/Users/gino/Documents/Code/expense-tracker/expense-webapp/src/App.js",[],"/Users/gino/Documents/Code/expense-tracker/expense-webapp/src/Expenses.js",[],"/Users/gino/Documents/Code/expense-tracker/expense-webapp/src/Category.js",[],"/Users/gino/Documents/Code/course-tracker/client/src/index.js",[],"/Users/gino/Documents/Code/course-tracker/client/src/AppNav.js",[],"/Users/gino/Documents/Code/course-tracker/client/src/App.js",[],"/Users/gino/Documents/Code/course-tracker/client/src/components/CourseListing.js",[],"/Users/gino/Documents/Code/course-tracker/client/src/components/ImportData.js",[],"/Users/gino/Documents/Code/course-tracker/client/src/Home.js",[],"/Users/gino/Documents/Code/course-tracker/client/src/components/ParseCSVFileDashboard.js",["73","74"],"import React, { Component } from 'react';\nimport { CSVReader } from 'react-papaparse';\nimport { UncontrolledDropdown, DropdownItem, DropdownMenu, DropdownToggle, UncontrolledAlert, Table, CardTitle, Card, CardHeader, \n  CardImg, CardBody, Label, FormText, Button, Row, Col, Container, CardFooter, CardText } from 'reactstrap';\n\n\nclass ParseCSVFileDashboard extends Component {\n\n    state = {  \n        // Initially, no file is selected \n        selectedFile: null,\n        parsedData: [],\n        fileType: '',\n        uploadStatus: {\n          status:'', \n          message: ''},\n        dropdownOpen: false,\n        uploadDisabeld: true\n    }\n\n    handleOnDrop = (data) => {\n      this.setState({uploadDisabeld: false, parsedData: [], fileType: '', uploadStatus: {\n        status:'', \n        message: ''}})\n\n      this.parse2Json(data);\n    };\n  \n    handleOnError = (err, file, inputElem, reason) => {\n      this.setState({uploadStatus: {\n        status:'ERROR', \n        message: err}})\n\n      console.log(err);\n    };\n  \n    handleOnRemoveFile = (data) => {\n      this.setState({uploadDisabeld: true, parsedData: [], fileType: '', uploadStatus: {\n        status:'', \n        message: ''}})\n    };\n  \n    // Try converting the array of data into Json objects that can be sent to backend\n    parse2Json = (data) => {\n      // Data has the following structure [data:{...}, errors: [...], meta: {...}\n      // For each row we should check that there were no errors in the parsing of that line, but for simplicity I will ignore this for now\n\n      // Fist of all lets see what typew of file this is. enrollment files have First Name and Last Name as fields in the structure\n      // Whereas pre-reqs have Course Complete in its structure\n      let parsedData = []\n      if( data[0].data['First Name'] ) {\n        console.log('Its an Enrollment file')\n        this.setState({fileType : 'ENROLL'})\n\n        parsedData = data.map( e => {\n          return {\n            name: e.data['First Name'] + ' ' + e.data['Last Name'],\n            email: e.data['Email'],\n            title: e.data['Title']\n          }\n        })\n        //this.setState({uploadDisabeld: true})\n      } else if( data[0].data['Course Complete']) {\n        console.log('Its an pre-req file')\n        this.setState({fileType : 'PREREQ'})\n        parsedData = data.map( e => {\n          return {\n            courseCompleteDate: e.data['Course Complete Date'],\n            email: e.data['DTU Contact: Contact Email'],\n            course: e.data['Course Full Name']\n          }\n        })\n      } else {\n        console.log('Invalid file type')\n      }\n      this.setState({parsedData: parsedData })\n    }\n\n    async uploadData(url, data) {\n      let response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data) // This is your file object\n      }).then(\n        response => { \n          console.log(response)\n          if( response.status !== 200 ) {\n            throw new Error(response.statusText)\n          }\n          this.setState({\n            uploadStatus: {\n              status:'SUCCESS', \n              message: this.state.fileType + ' data upload successfully'}\n          });\n          return response.json()\n        } // if the response is a JSON object\n      ).catch(\n        error => {\n          this.setState({\n            uploadStatus: {\n              status:'ERROR', \n              message: this.state.fileType + ' data upload  not loaded. '+error.message }\n          });\n          console.log(error); return [] } // Handle the error response object\n      );\n\n      return response;\n    }\n\n      \n    upload = event => {\n      if( this.state.fileType === 'PREREQ' ) {\n        this.uploadData('/api/prereqs', this.state.parsedData)\n      } else if( this.state.fileType === 'ENROLL' ) {\n        this.uploadData('/api/enrollments', this.state.parsedData)\n      }\n    }\n\n    render() { \n        var uploadStatusAlert = ''\n        if ( this.state.uploadStatus && this.state.uploadStatus.status === 'SUCCESS') {\n          uploadStatusAlert = <UncontrolledAlert color=\"info\"> {this.state.uploadStatus.message} </UncontrolledAlert>\n        }\n        else if (this.state.uploadStatus && this.state.uploadStatus.status === 'ERROR') {\n          uploadStatusAlert = <UncontrolledAlert color=\"danger\"> {this.state.uploadStatus.message} </UncontrolledAlert>       \n        }\n\n        var parsedData = \"\"\n        if( this.state.fileType === 'ENROLL') {\n          parsedData =\n          <div>\n          <Table dark hover>\n            <thead><tr><th>Name</th><th>Email</th><th>Title</th></tr></thead>\n            <tbody>\n              {this.state.parsedData.map( (e, i) => <tr key={i}><td>{e.name}</td><td>{e.email}</td><td>{e.title}</td></tr> )}\n            </tbody>\n          </Table>\n          </div>\n        } else if ( this.state.fileType === 'PREREQ' ) {\n          parsedData =\n          <Table dark hover>\n            <thead><tr><th>Email</th><th>Course Name</th><th>Completed Date</th></tr></thead>\n            <tbody>\n              {this.state.parsedData.map( (e, i) => <tr key={i}><td>{e.email}</td><td>{e.course}</td><td>{e.courseCompleteDate}</td></tr> )}\n            </tbody>\n          </Table>          \n        }\n\n        var courseChooser = ''\n        if( this.state.fileType && this.state.fileType === 'ENROLL') {\n          courseChooser =\n            <UncontrolledDropdown size=\"sm\">\n            <DropdownToggle caret>\n              Course?\n            </DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem header>Filipa</DropdownItem>\n              <DropdownItem>Course 1</DropdownItem>\n              <DropdownItem>Course 2</DropdownItem>\n              <DropdownItem divider />\n              <DropdownItem header>Isabel</DropdownItem>\n              <DropdownItem>Course 3</DropdownItem>\n              <DropdownItem>Course 4</DropdownItem>\n              <DropdownItem>Course 5</DropdownItem>\n            </DropdownMenu>\n            </UncontrolledDropdown>\n        }\n\n        return ( \n            <div> \n                <Container className=\"themed-container\" >\n                <Row>\n                  <Col style={{width: '5%'}}>\n                    <h1> \n                    Import Enroll & Pre-Reqs files\n                    </h1> \n                  </Col>\n                </Row>\n                <Row>\n                <Col>\n                  <Card style={{ width: '20rem' }}>\n                      <CardHeader><CardImg top src=\"/enrollment.png\" alt=\"Card image cap\" /></CardHeader>\n                          <CardBody> \n                              <CSVReader  config={{header: true, skipEmptyLines: true}} onDrop={this.handleOnDrop} onError={this.handleOnError} addRemoveButton onRemoveFile={this.handleOnRemoveFile}>\n                                <FormText>Drop CSV file here. The type of file (enroll/pre-req) will be automatically detected</FormText>\n                              </CSVReader>                      \n                          </CardBody>\n                      <CardFooter>\n                        <Container className=\"themed-container\" >\n                        <Row>\n                        <Col>\n                        <Button size='sm' color=\"primary\" disabled={ this.state.fileType === '' || this.state.uploadDisabeld } onClick={this.upload}>Submit results</Button>\n                        </Col>\n                        <Col>\n                        {courseChooser}\n                        </Col>\n                        </Row></Container>\n                      </CardFooter>\n                  </Card>\n                </Col>\n                <Col sm=\"8\">\n                  <div className=\" small\">\n                    {uploadStatusAlert}\n                    <Card>\n                      <CardHeader>\n                        <CardText><b>File Contents:</b></CardText>\n                      </CardHeader>\n                      <CardBody>\n                      {parsedData}\n                      </CardBody>\n                    </Card>\n                  </div>\n                </Col>\n                </Row>\n                </Container>\n            </div>\n          );     \n    }\n}\n \nexport default ParseCSVFileDashboard;","/Users/gino/Documents/Code/course-tracker/client/src/components/CourseManagement.js",[],"/Users/gino/Documents/Code/course-tracker/client/src/components/CourseSelector.js",["75","76"],{"ruleId":"77","severity":1,"message":"78","line":3,"column":102,"nodeType":"79","messageId":"80","endLine":3,"endColumn":111},{"ruleId":"77","severity":1,"message":"81","line":4,"column":22,"nodeType":"79","messageId":"80","endLine":4,"endColumn":27},{"ruleId":"77","severity":1,"message":"81","line":2,"column":76,"nodeType":"79","messageId":"80","endLine":2,"endColumn":81},{"ruleId":"82","severity":1,"message":"83","line":13,"column":5,"nodeType":"84","messageId":"85","endLine":15,"endColumn":6},"no-unused-vars","'CardTitle' is defined but never used.","Identifier","unusedVar","'Label' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor"]